---
import type { CollectionEntry } from 'astro:content';
import BaseHead from '../components/BaseHead.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import FormattedDate from '../components/FormattedDate.astro';
<<<<<<< HEAD
import { generateSchema } from '../utils/generateSchema';

// Props for the blog post
type Props = CollectionEntry<'blog'>['data'];

// Destructure frontmatter from Astro.props
const { title, description, pubDate, heroImage, author } = Astro.props;

// Debugging: Log the frontmatter object
console.log("Frontmatter:", { title, description, pubDate, heroImage, author });

// Handle author schema
const schemaAuthor = author?.name
  ? { name: author.name, url: author.url }
  : { name: "Unknown Author", url: `${Astro.site.origin}/author/unknown` };

// Debugging: Log the processed schema author object
console.log("Processed Schema Author:", schemaAuthor);

// Generate schema.org JSON-LD
const schema = generateSchema({
  schemaType: 'BlogPosting',
  title,
  description,
  publishDate: new Date(pubDate).toISOString(),
  author: schemaAuthor,
  url: `${Astro.site.origin}${Astro.url.pathname}`,
});

// Debugging: Log the final schema object
console.log("Final Schema Object:", schema);
=======

type Props = CollectionEntry<'blog'>['data'];

const { title, description, pubDate, updatedDate, heroImage } = Astro.props;
>>>>>>> 7e4f49be7851bb727bf748b03933b8683ed08e2e
---

<html lang="en">
	<head>
		<BaseHead title={title} description={description} />
<<<<<<< HEAD
		<!-- Schema.org JSON-LD -->
		<script type="application/ld+json" set:html={JSON.stringify(schema)}></script>
=======
>>>>>>> 7e4f49be7851bb727bf748b03933b8683ed08e2e
		<style>
			main {
				width: calc(100% - 2em);
				max-width: 100%;
				margin: 0;
			}
			.hero-image {
				width: 100%;
			}
			.hero-image img {
				display: block;
				margin: 0 auto;
				border-radius: 12px;
				box-shadow: var(--box-shadow);
			}
			.prose {
				width: 720px;
				max-width: calc(100% - 2em);
				margin: auto;
				padding: 1em;
				color: rgb(var(--gray-dark));
			}
			.title {
				margin-bottom: 1em;
				padding: 1em 0;
				text-align: center;
				line-height: 1;
			}
			.title h1 {
				margin: 0 0 0.5em 0;
			}
			.date {
				margin-bottom: 0.5em;
				color: rgb(var(--gray));
			}
			.last-updated-on {
				font-style: italic;
			}
		</style>
	</head>

	<body>
		<Header />
		<main>
			<article>
<<<<<<< HEAD
				<!-- Hero Image -->
				<div class="hero-image">
					{heroImage && <img width={1020} height={510} src={heroImage} alt="" />}
				</div>

				<!-- Blog Content -->
=======
				<div class="hero-image">
					{heroImage && <img width={1020} height={510} src={heroImage} alt="" />}
				</div>
>>>>>>> 7e4f49be7851bb727bf748b03933b8683ed08e2e
				<div class="prose">
					<div class="title">
						<div class="date">
							<FormattedDate date={pubDate} />
<<<<<<< HEAD
=======
							{
								updatedDate && (
									<div class="last-updated-on">
										Last updated on <FormattedDate date={updatedDate} />
									</div>
								)
							}
>>>>>>> 7e4f49be7851bb727bf748b03933b8683ed08e2e
						</div>
						<h1>{title}</h1>
						<hr />
					</div>
					<slot />
				</div>
			</article>
		</main>
		<Footer />
	</body>
<<<<<<< HEAD
</html>
=======
</html>
>>>>>>> 7e4f49be7851bb727bf748b03933b8683ed08e2e

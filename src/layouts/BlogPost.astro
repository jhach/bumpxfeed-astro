---
import type { CollectionEntry } from 'astro:content';
import BaseHead from '../components/BaseHead.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import FormattedDate from '../components/FormattedDate.astro';
import { generateSchema } from '../utils/generateSchema';

// Props for the blog post
type Props = CollectionEntry<'blog'>['data'];

// Destructure frontmatter from Astro.props
const { title, description, pubDate, updatedDate, heroImage, author } = Astro.props;

// Determine environment and set site origin
const isLocal = import.meta.env.DEV;
const siteOrigin = isLocal ? 'http://localhost:4321' : Astro.site?.origin || '';

// Generate the hero image URL safely
const heroImageUrl = heroImage
  ? heroImage.startsWith('http')
    ? heroImage
    : `${siteOrigin}${heroImage}`
  : undefined;

// Debugging: Log the hero image URL
console.log("Hero Image URL:", heroImageUrl);

// Generate schema.org JSON-LD
const schema = generateSchema({
  schemaType: 'BlogPosting',
  siteUrl: siteOrigin, // Pass site origin
  title,
  description,
  publishDate: new Date(pubDate).toISOString(),
  updatedDate: updatedDate ? new Date(updatedDate).toISOString() : undefined,
  heroImage: heroImageUrl,
  author,
  url: Astro.url.pathname, // Pass relative URL (without site origin)
});

// Debugging: Log the final schema object
console.log("Final Schema Object:", schema);
---

<html lang="en">
  <head>
    <BaseHead title={title} description={description} />
    <!-- Schema.org JSON-LD -->
    <script type="application/ld+json" is:inline set:html={JSON.stringify(schema)}></script>
    <style>
      main {
        width: calc(100% - 2em);
        max-width: 100%;
        margin: 0;
      }
      .hero-image {
        width: 100%;
      }
      .hero-image img {
        display: block;
        margin: 0 auto;
        border-radius: 12px;
        box-shadow: var(--box-shadow);
      }
      .prose {
        width: 720px;
        max-width: calc(100% - 2em);
        margin: auto;
        padding: 1em;
        color: rgb(var(--gray-dark));
      }
      .title {
        margin-bottom: 1em;
        padding: 1em 0;
        text-align: center;
        line-height: 1;
      }
      .title h1 {
        margin: 0 0 0.5em 0;
      }
      .date {
        margin-bottom: 0.5em;
        color: rgb(var(--gray));
      }
      .last-updated-on {
        font-style: italic;
      }
    </style>
  </head>
  <body>
    <Header />
    <main>
      <article>
        <!-- Hero Image -->
        <div class="hero-image">
          {heroImageUrl && <img src={heroImageUrl} alt={title || 'Hero Image'} />}
        </div>
        <!-- Blog Content -->
        <div class="prose">
          <div class="title">
            <div class="date">
              <FormattedDate date={pubDate} />
              {updatedDate && (
                <div class="last-updated-on">
                  Last updated on <FormattedDate date={updatedDate} />
                </div>
              )}
            </div>
            <h1>{title}</h1>
            <hr />
          </div>
          <slot />
        </div>
      </article>
    </main>
    <Footer />
  </body>
</html>
